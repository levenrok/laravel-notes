{"/laravel-notes/2025-06-30-laravel-components.html": {
    "title": "Laravel Components",
    "keywords": "",
    "url": "/laravel-notes/2025-06-30-laravel-components.html",
    "body": "A Component can be defined in the resources/views/components directory. Definition components/layout.blade.php: &lt;!DOCTYPE html&gt; &lt;html lang=\"en\"&gt; &lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;Home Page&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;nav&gt; &lt;a href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/about\"&gt;About&lt;/a&gt; &lt;a href=\"/contact\"&gt;Contact&lt;/a&gt; &lt;/nav&gt; &lt;/body&gt; &lt;/html&gt; This Component can be referenced in other blade files with the &lt;x- html tag with the file name appended in the end (&lt;x-layout&gt;...&lt;/x-layout&gt;). Any content inside the &lt;x-layout&gt; tag will be slotted inside the ‘layout’ component home.blade.php: &lt;x-layout&gt; &lt;h1&gt;Home Page&lt;/h1&gt; &lt;/x-layout&gt; Named Slots A Component can use multiple $slot variables with named slots. ... &lt;body&gt; &lt;h1&gt;&lt;/h1&gt; &lt;nav&gt; &lt;a href=\"/\"&gt;Home&lt;/a&gt; &lt;a href=\"/about\"&gt;About&lt;/a&gt; &lt;a href=\"/contact\"&gt;Contact&lt;/a&gt; &lt;/nav&gt; &lt;/body&gt; ... A named slot can be used with the &lt;x-slot: tag with the corresponding variable name appended next to the ‘:’ (&lt;x-slot:heading&gt;...&lt;/x-slot:heading&gt;). &lt;x-layout&gt; &lt;x-slot:heading&gt;Home Page&lt;/x-slot:heading&gt; &lt;/x-layout&gt; Attributes HTML attributes such as id, class, … can be used inside a blade component with the $attributes object. nav-link.blade.php: &lt;a &gt;&lt;/a&gt; layout.blade.php: ... &lt;nav&gt; &lt;x-nav-link href=\"/\"&gt;Home&lt;/x-nav-link&gt; &lt;x-nav-link href=\"/about\"&gt;About&lt;/x-nav-link&gt; &lt;x-nav-link href=\"/contact\"&gt;Contact&lt;/x-nav-link&gt; &lt;/nav&gt; ... Since $attributes is an object different methods can be called on it. One such method is ‘merge’ which can be used to define some sensible default for the component. &lt;a &gt;&lt;/a&gt; Props A Prop can be used to run code inside a component conditionally. layout.blade.php: ... &lt;nav&gt; &lt;x-nav-link href=\"/\" :active=\"true\"&gt;Home&lt;/x-nav-link&gt; &lt;x-nav-link href=\"/about\" :active=\"false\"&gt;About&lt;/x-nav-link&gt; &lt;x-nav-link href=\"/contact\" :active=\"false\"&gt;Contact&lt;/x-nav-link&gt; &lt;/nav&gt; ... nav-link.blade.php: @props(['active' =&gt; false]) &lt;a class=\"\" &gt;&lt;/a&gt; A prop can be defined with the @props() blade directive. ’:’ can be used with the prop to define how the value will be passed down. active=\"true\" - value will be interpreted as the string \"true\" :active=\"true\" - value will be interpreted as the boolean true Function calls can be also used as inside a prop and the return value will be passed down. ... &lt;nav&gt; &lt;x-nav-link href=\"/\" :active=\"request()-&gt;is('/')\"&gt;Home&lt;/x-nav-link&gt; &lt;x-nav-link href=\"/about\" :active=\"request()-&gt;is('/about')\"&gt;About&lt;/x-nav-link&gt; &lt;x-nav-link href=\"/contact\" :active=\"request()-&gt;is('/contact')\"&gt;Contact&lt;/x-nav-link&gt; &lt;/nav&gt; ..."
  },"/laravel-notes/2025-06-30-views-and-routes.html": {
    "title": "Views and Routes",
    "keywords": "",
    "url": "/laravel-notes/2025-06-30-views-and-routes.html",
    "body": "Routes are defined in the routes/web.php file. ‘GET’ Routes &lt;?php use Illuminate\\Support\\Facades\\Route; Route::get('/', function() { return view('welcome'); }); Above code tells Laravel to run the code defined inside the function if the user visits the ’/’ page (listens for a GET request). The function here returns a view called ‘welcome’ defined in resources/views directory as a blade component (welcome.blade.php). &lt;?php use Illuminate\\Support\\Facades\\Route; Route::get('/', function() { return view('welcome'); }); Route::get('/about', function() { return view('about'); }); Route::get('/contact', function() { return view('contact'); }); Passing Data Data can be passed to a view by passing it as the second argument as an array to the ‘view’ function. &lt;?php use Illuminate\\Support\\Facades\\Route; Route::get('/jobs', function() { return view('jobs', [ 'jobs' =&gt; [ [ 'title' =&gt; 'Director', 'salary' =&gt; '$50,000', ], [ 'title' =&gt; 'Programmer', 'salary' =&gt; '$10,000', ], [ 'title' =&gt; 'Teacher', 'salary' =&gt; '$40,000', ], ] ]); }); ... Data that are passed can be accessed in a blade file as a varible with the same name as the ‘key’ name. ... @foreach ($jobs as $job) &lt;li&gt;: Pays &lt;/li&gt; @endforeach ... ## Wildcard Routes A Wildcard Route is a route that matches any URL pattern, often used to catch unknown pages or define dynamic routes that accept a variable. &lt;?php use Illuminate\\Support\\Arr; use Illuminate\\Support\\Facades\\Route; Route::get('/jobs/{id}', function($id) { $jobs = [ [ 'id' =&gt; 1, 'title' =&gt; 'Director', 'salary' =&gt; '$50,000', ], [ 'id' =&gt; 2, 'title' =&gt; 'Programmer', 'salary' =&gt; '$10,000', ], [ 'id' =&gt; 3, 'title' =&gt; 'Teacher', 'salary' =&gt; '$40,000', ], ]; Arr::first($jobs, fn($job) =&gt; $job['id'] == $job); return view('job', ['job' =&gt; $job]) }); ... A Wildcard Route can be defined with the ‘{}’ appended to the route name. A Route Varible is passed inside ‘{}’ that can be used to run conditional code ({id}). This code passes the corresponding ‘job’ to the view by iteratoring over every element in the array and checking if the route variable matches the id of the ‘job’ ... Arr::first($jobs, fn($job) =&gt; $job['id'] == $job); return view('job', ['job' =&gt; $job]) ..."
  }}
