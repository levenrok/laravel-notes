[{"id":0,"href":"/laravel-notes/2.laravel-components/","title":"2. Laravel Components","section":"Home","content":" Laravel Components # A Component can be defined in the resources/views/components directory.\ncomponents/layout.blade.php:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Home Page\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/contact\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt; {{ $slot }} \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; This Component can be referenced in other blade files with the \u0026lt;x- html tag with the file name appended in the end (\u0026lt;x-layout\u0026gt;...\u0026lt;/x-layout\u0026gt;). Any content inside the \u0026lt;x-layout\u0026gt; tag will be slotted inside the \u0026rsquo;layout\u0026rsquo; component home.blade.php:\n\u0026lt;x-layout\u0026gt; \u0026lt;h1\u0026gt;Home Page\u0026lt;/h1\u0026gt; \u0026lt;/x-layout\u0026gt; Named Slots # A Component can use multiple $slot variables with named slots.\n... \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;{{ $heading }}\u0026lt;/h1\u0026gt; \u0026lt;nav\u0026gt; \u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/a\u0026gt; \u0026lt;a href=\u0026#34;/contact\u0026#34;\u0026gt;Contact\u0026lt;/a\u0026gt; \u0026lt;/nav\u0026gt; {{ $slot }} \u0026lt;/body\u0026gt; ... A named slot can be used with the \u0026lt;x-slot: tag with the corresponding variable name appended next to the \u0026lsquo;:\u0026rsquo; (\u0026lt;x-slot:heading\u0026gt;...\u0026lt;/x-slot:heading\u0026gt;). \u0026lt;x-layout\u0026gt; \u0026lt;x-slot:heading\u0026gt;Home Page\u0026lt;/x-slot:heading\u0026gt; \u0026lt;/x-layout\u0026gt; Attributes # HTML attributes such as id, class, \u0026hellip; can be used inside a blade component with the $attributes object.\nnav-link.blade.php:\n\u0026lt;a {{ $attributes }}\u0026gt;{{ $slot }}\u0026lt;/a\u0026gt; layout.blade.php:\n... \u0026lt;nav\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/\u0026#34;\u0026gt;Home\u0026lt;/x-nav-link\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/about\u0026#34;\u0026gt;About\u0026lt;/x-nav-link\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/contact\u0026#34;\u0026gt;Contact\u0026lt;/x-nav-link\u0026gt; \u0026lt;/nav\u0026gt; ... Since $attributes is an object different methods can be called on it. One such method is \u0026lsquo;merge\u0026rsquo; which can be used to define some sensible default for the component. \u0026lt;a {{ $attributes-\u0026gt;merge([\u0026#39;class\u0026#39; =\u0026gt; \u0026#39;text-blue-500 hover:text-blue-300\u0026#39;]) }}\u0026gt;{{ $slot }}\u0026lt;/a\u0026gt; Props # A Prop can be used to run code inside a component conditionally.\nlayout.blade.php:\n... \u0026lt;nav\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/\u0026#34; :active=\u0026#34;true\u0026#34;\u0026gt;Home\u0026lt;/x-nav-link\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/about\u0026#34; :active=\u0026#34;false\u0026#34;\u0026gt;About\u0026lt;/x-nav-link\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/contact\u0026#34; :active=\u0026#34;false\u0026#34;\u0026gt;Contact\u0026lt;/x-nav-link\u0026gt; \u0026lt;/nav\u0026gt; ... nav-link.blade.php:\n@props([\u0026#39;active\u0026#39; =\u0026gt; false]) \u0026lt;a class=\u0026#34;{{ $active ? bg-gray-900 : bg-gray-700 }}\u0026#34; {{ $attributes }}\u0026gt;{{ $slot }}\u0026lt;/a\u0026gt; A prop can be defined with the @props() blade directive. \u0026lsquo;:\u0026rsquo; can be used with the prop to define how the value will be passed down. active=\u0026quot;true\u0026quot; - value will be interpreted as the string \u0026quot;true\u0026quot; :active=\u0026quot;true\u0026quot; - value will be interpreted as the boolean true Function calls can be also used as inside a prop and the return value will be passed down. ... \u0026lt;nav\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/\u0026#34; :active=\u0026#34;{{ request-\u0026gt;is(\u0026#39;/\u0026#39;) }}\u0026#34;\u0026gt;Home\u0026lt;/x-nav-link\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/about\u0026#34; :active=\u0026#34;{{ request-\u0026gt;is(\u0026#39;/about\u0026#39;) }}\u0026#34;\u0026gt;About\u0026lt;/x-nav-link\u0026gt; \u0026lt;x-nav-link href=\u0026#34;/contact\u0026#34; :active=\u0026#34;{{ request-\u0026gt;is(\u0026#39;/contact\u0026#39;) }}\u0026#34;\u0026gt;Contact\u0026lt;/x-nav-link\u0026gt; \u0026lt;/nav\u0026gt; ... "},{"id":1,"href":"/laravel-notes/1.views-and-routes/","title":"1. Views and Routes","section":"Home","content":" Views and Routes # Routes are defined in the routes/web.php file.\n\u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function() { return view(\u0026#39;welcome\u0026#39;); }); Above code tells Laravel to run the code defined inside the function if the user visits the \u0026rsquo;/\u0026rsquo; page (listens for a GET request). The function here returns a view called \u0026lsquo;welcome\u0026rsquo; defined in resources/views directory as a blade component (welcome.blade.php). \u0026lt;?php use Illuminate\\Support\\Facades\\Route; Route::get(\u0026#39;/\u0026#39;, function() { return view(\u0026#39;welcome\u0026#39;); }); Route::get(\u0026#39;/about\u0026#39;, function() { return view(\u0026#39;about\u0026#39;); }); Route::get(\u0026#39;/contact\u0026#39;, function() { return view(\u0026#39;contact\u0026#39;); }); stateDiagram-v2 /: get('/', function() {...}) note right of / return 'welcome.blade.php' view on GET request to '/' end note /about: get('/about', function() {...}) note right of /about return 'about.blade.php' view on GET request to '/about' end note /contact: get('/contact', function() {...}) note right of /contact return 'contact.blade.php' view on GET request to '/contact' end note "}]